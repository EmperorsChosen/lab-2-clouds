name: CI/CD Pipeline for Flask AWS Deployment

on:
  push:
    branches:
      - main

jobs:
  # 1. Клонування репозиторію та перевірка цілісності
  clone_and_validate:
    name: Clone and Validate Repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Check Directory Structure
        run: |
          echo "Current directory: $(pwd)"
          ls -la

      - name: Validate Repository Files
        run: |
          REQUIRED_FILES=("user_service.py" "parcels_service.py" "requirements.txt" "web_part/web_interface.py")
          for FILE in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$FILE" ]; then
              echo "Error: Missing required file: $FILE"
              exit 1
            fi
          done
          echo "Repository validation successful."

      - name: Save Artifact Locally
        run: |
          mkdir -p artifacts
          zip -r artifacts/flask-app-$(date +%F).zip ./*
          echo "Artifact created: artifacts/flask-app-$(date +%F).zip"

      - name: Upload Artifact to GitHub Actions
        uses: actions/upload-artifact@v3
        with:
          name: flask-app-artifact
          path: artifacts/

  # 2. Деплой інфраструктури через CloudFormation
  deploy_infrastructure:
    name: Deploy CloudFormation Infrastructure
    needs: clone_and_validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy CloudFormation Stack
        id: cloudformation_deploy
        run: |
          echo "Deploying CloudFormation stack..."
          aws cloudformation deploy \
            --template-file cloudformation/cloudformation.yml \
            --stack-name flask-app-stack \
            --capabilities CAPABILITY_NAMED_IAM
          echo "CloudFormation stack deployed successfully!"

  # 3. Тестування на EC2
  test_ec2_instance:
    name: Test EC2 Instance and Services
    needs: deploy_infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get EC2 Public IP
        id: ec2_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=flask-app-instance" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
          if [ -z "$PUBLIC_IP" ]; then
            echo "Error: No running EC2 instance found!"
            exit 1
          fi
          echo "EC2 Public IP: $PUBLIC_IP"
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Test Website Availability
        run: |
          echo "Testing website availability on port 5000..."
          curl -s -o /dev/null -w "%{http_code}" http://${{ env.PUBLIC_IP }}:5000 | grep 200 || (echo "Website not accessible"; exit 1)
          echo "Website is accessible and returned 200 status."
